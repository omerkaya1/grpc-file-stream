// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/file-streamer.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_OK      Status = 0
	Status_FAILURE Status = 1
	Status_UNKNOWN Status = 2
)

var Status_name = map[int32]string{
	0: "OK",
	1: "FAILURE",
	2: "UNKNOWN",
}

var Status_value = map[string]int32{
	"OK":      0,
	"FAILURE": 1,
	"UNKNOWN": 2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4c258b730fe3910, []int{0}
}

type Request struct {
	// The name of the resource to read.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// The offset for the first byte to return in the read, relative to the start
	// of the resource.
	//
	// A `read_offset` that is negative or greater than the size of the resource
	// will cause an `OUT_OF_RANGE` error.
	ReadOffset int64 `protobuf:"varint,2,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// The maximum number of `data` bytes the server is allowed to return in the
	// sum of all `ReadResponse` messages. A `read_limit` of zero indicates that
	// there is no limit, and a negative `read_limit` will cause an error.
	//
	// If the stream returns fewer bytes than allowed by the `read_limit` and no
	// error occurred, the stream includes all data from the `read_offset` to the
	// end of the resource.
	ReadLimit int64 `protobuf:"varint,3,opt,name=read_limit,json=readLimit,proto3" json:"read_limit,omitempty"`
	// A portion of the data for the resource. The client **may** leave `data`
	// empty for any given `WriteRequest`. This enables the client to inform the
	// service that the request is still live while it is running an operation to
	// generate more data.
	Content              []byte   `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c258b730fe3910, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *Request) GetReadOffset() int64 {
	if m != nil {
		return m.ReadOffset
	}
	return 0
}

func (m *Request) GetReadLimit() int64 {
	if m != nil {
		return m.ReadLimit
	}
	return 0
}

func (m *Request) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Response struct {
	Message              string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code                 Status   `protobuf:"varint,2,opt,name=Code,proto3,enum=fs.Status" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4c258b730fe3910, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetCode() Status {
	if m != nil {
		return m.Code
	}
	return Status_OK
}

func init() {
	proto.RegisterEnum("fs.Status", Status_name, Status_value)
	proto.RegisterType((*Request)(nil), "fs.Request")
	proto.RegisterType((*Response)(nil), "fs.Response")
}

func init() {
	proto.RegisterFile("api/file-streamer.proto", fileDescriptor_a4c258b730fe3910)
}

var fileDescriptor_a4c258b730fe3910 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x4d, 0xa7, 0x9b, 0x3b, 0x9b, 0x32, 0xe2, 0x85, 0x45, 0x50, 0xcb, 0xbc, 0x29, 0x03,
	0x2b, 0xcc, 0x07, 0x10, 0xff, 0x0d, 0x64, 0xb3, 0x85, 0x94, 0x21, 0x78, 0x53, 0x62, 0x77, 0x2a,
	0x81, 0xb6, 0xa9, 0x49, 0xea, 0x33, 0xf8, 0xd8, 0x92, 0x74, 0xbd, 0xfc, 0xfd, 0xce, 0x81, 0xef,
	0xe3, 0x83, 0x73, 0xde, 0x88, 0xbb, 0x42, 0x94, 0x78, 0xab, 0x8d, 0x42, 0x5e, 0xa1, 0x8a, 0x1a,
	0x25, 0x8d, 0xa4, 0x5e, 0xa1, 0xe7, 0x7f, 0x04, 0x46, 0x0c, 0x7f, 0x5a, 0xd4, 0x86, 0xde, 0xc0,
	0x89, 0x42, 0x2d, 0x5b, 0x95, 0x63, 0x56, 0xf3, 0x0a, 0x7d, 0x12, 0x90, 0x70, 0xcc, 0xa6, 0xbd,
	0x8c, 0x79, 0x85, 0xf4, 0x1a, 0x26, 0x0a, 0xf9, 0x2e, 0x93, 0x45, 0xa1, 0xd1, 0xf8, 0x5e, 0x40,
	0xc2, 0x01, 0x03, 0xab, 0x12, 0x67, 0xe8, 0x25, 0x38, 0xca, 0x4a, 0x51, 0x09, 0xe3, 0x0f, 0xdc,
	0x7d, 0x6c, 0xcd, 0xc6, 0x0a, 0xea, 0xc3, 0x28, 0x97, 0xb5, 0xc1, 0xda, 0xf8, 0x10, 0x90, 0x70,
	0xca, 0x7a, 0x9c, 0xbf, 0xc0, 0x31, 0x43, 0xdd, 0xc8, 0x5a, 0xa3, 0xfd, 0x7a, 0x47, 0xad, 0xf9,
	0x77, 0x5f, 0xa2, 0x47, 0x7a, 0x05, 0x87, 0xcf, 0x72, 0x87, 0x2e, 0xf8, 0x74, 0x09, 0x51, 0xa1,
	0xa3, 0xd4, 0x70, 0xd3, 0x6a, 0xe6, 0xfc, 0x62, 0x01, 0xc3, 0x8e, 0xe9, 0x10, 0xbc, 0x64, 0x3d,
	0x3b, 0xa0, 0x13, 0x18, 0xad, 0x1e, 0xdf, 0x36, 0x5b, 0xf6, 0x3a, 0x23, 0x16, 0xb6, 0xf1, 0x3a,
	0x4e, 0x3e, 0xe2, 0x99, 0xb7, 0x7c, 0x80, 0xb3, 0x95, 0x28, 0x31, 0xdd, 0xcf, 0x92, 0xa2, 0xfa,
	0x15, 0x39, 0xd2, 0x10, 0xc6, 0xa9, 0x91, 0x0a, 0xed, 0x8d, 0x4e, 0x6c, 0xc2, 0x7e, 0xa1, 0x8b,
	0x69, 0x07, 0x5d, 0xc9, 0x90, 0x3c, 0x1d, 0x7d, 0x0e, 0x78, 0x23, 0xbe, 0x86, 0x6e, 0xcf, 0xfb,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xa3, 0xcb, 0xe8, 0x6a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileStreamerServiceClient is the client API for FileStreamerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileStreamerServiceClient interface {
	StoreFile(ctx context.Context, opts ...grpc.CallOption) (FileStreamerService_StoreFileClient, error)
}

type fileStreamerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStreamerServiceClient(cc grpc.ClientConnInterface) FileStreamerServiceClient {
	return &fileStreamerServiceClient{cc}
}

func (c *fileStreamerServiceClient) StoreFile(ctx context.Context, opts ...grpc.CallOption) (FileStreamerService_StoreFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileStreamerService_serviceDesc.Streams[0], "/fs.FileStreamerService/StoreFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStreamerServiceStoreFileClient{stream}
	return x, nil
}

type FileStreamerService_StoreFileClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type fileStreamerServiceStoreFileClient struct {
	grpc.ClientStream
}

func (x *fileStreamerServiceStoreFileClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileStreamerServiceStoreFileClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileStreamerServiceServer is the server API for FileStreamerService service.
type FileStreamerServiceServer interface {
	StoreFile(FileStreamerService_StoreFileServer) error
}

// UnimplementedFileStreamerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFileStreamerServiceServer struct {
}

func (*UnimplementedFileStreamerServiceServer) StoreFile(srv FileStreamerService_StoreFileServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreFile not implemented")
}

func RegisterFileStreamerServiceServer(s *grpc.Server, srv FileStreamerServiceServer) {
	s.RegisterService(&_FileStreamerService_serviceDesc, srv)
}

func _FileStreamerService_StoreFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStreamerServiceServer).StoreFile(&fileStreamerServiceStoreFileServer{stream})
}

type FileStreamerService_StoreFileServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type fileStreamerServiceStoreFileServer struct {
	grpc.ServerStream
}

func (x *fileStreamerServiceStoreFileServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileStreamerServiceStoreFileServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileStreamerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fs.FileStreamerService",
	HandlerType: (*FileStreamerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreFile",
			Handler:       _FileStreamerService_StoreFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/file-streamer.proto",
}
